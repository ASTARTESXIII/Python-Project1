import logging
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π
def fetch_vacancies():
    url = 'https://api.hh.ru/vacancies'
    keywords = {
        "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ø–µ–Ω—Ç–µ—Å—Ç–µ—Ä", "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–∏–Ω–∂–µ–Ω–µ—Ä –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "—Å–µ—Ä–≤–∏—Å—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (IT –∫–æ–º–ø–∞–Ω–∏—è)", "–≤–µ–¥—É—â–∏–π –∏–Ω–∂–µ–Ω–µ—Ä –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∑–∞—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "–∏–Ω–∂–µ–Ω–µ—Ä –ø–æ –∑–∞—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –∑–∞—â–∏—Ç–µ –ò–¢-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
        "–æ—Ç–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω–∞", "—Å–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä –ø–æ SIEM",
        "–≤–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∑–∞—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–∏–Ω–∂–µ–Ω–µ—Ä-–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    }
    all_vacancies = []
    page = 0

    while True:
        params = {
            'text': '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
            'area': 113,  # –†–æ—Å—Å–∏—è
            'page': page,
            'per_page': 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }
        response = requests.get(url, params=params)
        if response.status_code != 200:
            break

        vacancies = response.json()
        items = vacancies.get('items', [])
        if not items:
            break

        filtered_vacancies = [
            vacancy for vacancy in items
            if any(keyword in vacancy['name'].lower() for keyword in keywords)
        ]
        all_vacancies.extend(filtered_vacancies)

        page += 1
        if page >= vacancies.get('pages', 1):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            break

    return len(all_vacancies), all_vacancies

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /vacancies, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏.')

# –ö–æ–º–∞–Ω–¥–∞ /vacancies
async def vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π
    try:
        limit = int(context.args[0]) if context.args else 20  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 20
        if limit > 100:
            limit = 100  # –û–≥—Ä–∞–Ω–∏—á–∏–º –º–∞–∫—Å–∏–º—É–º –¥–æ 100, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –±–æ—Ç
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /vacancies.")
        return

    count, vacancies = fetch_vacancies()

    if count == 0:
        await update.message.reply_text('–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
    else:
        message = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ hh.ru –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏:\n\n"
        batch_size = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        vacancies = vacancies[:limit]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞

        for i, vacancy in enumerate(vacancies, 1):
            title = vacancy['name']
            salary = vacancy.get('salary')
            if salary:
                salary_info = []
                if salary.get('from'):
                    salary_info.append(f"–æ—Ç {salary['from']} RUR")
                if salary.get('to'):
                    salary_info.append(f"–¥–æ {salary['to']} RUR")
                salary_info = " ".join(salary_info) if salary_info else "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            else:
                salary_info = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            company = vacancy['employer']['name']
            link = vacancy['alternate_url']
            
            message += (
                f"üìå *–í–∞–∫–∞–Ω—Å–∏—è*: {title}\n"
                f"üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞*: {salary_info}\n"
                f"üè¢ *–ö–æ–º–ø–∞–Ω–∏—è*: {company}\n"
                f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é]({link})\n"
                "---\n"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ batch_size –≤–∞–∫–∞–Ω—Å–∏–π
            if i % batch_size == 0 or i == len(vacancies):
                await update.message.reply_text(message, parse_mode='Markdown')
                message = ""  # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—Ç–∏–∏

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    app = ApplicationBuilder().token('7891800291:AAHaImzymyPDMTNzXhqHOg_MK6Cs_9_MY68').build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('vacancies', vacancies))

    app.run_polling()